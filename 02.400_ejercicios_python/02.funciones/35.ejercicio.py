def generar_n_caracteres(n,a):
    return n*a

if __name__ == "__main__":
    # ğŸ”¹ Pruebas con assert para generar_n_caracteres()
    assert generar_n_caracteres(5, "x") == "xxxxx"  # Caso bÃ¡sico
    assert generar_n_caracteres(3, "*") == "***"  # MultiplicaciÃ³n de asteriscos
    assert generar_n_caracteres(0, "a") == ""  # Caso con n = 0 debe devolver cadena vacÃ­a
    assert generar_n_caracteres(1, "b") == "b"  # Caso con n = 1 devuelve solo un carÃ¡cter
    assert generar_n_caracteres(10, "-") == "----------"  # MultiplicaciÃ³n de guiones
    assert generar_n_caracteres(4, "ab") == "abababab"  # MultiplicaciÃ³n de una cadena mÃ¡s larga
    assert generar_n_caracteres(2, "123") == "123123"  # NÃºmeros en cadena repetidos
    assert generar_n_caracteres(6, " ") == "      "  # Espacios repetidos
    assert generar_n_caracteres(1, "") == ""  # Caracter vacÃ­o multiplicado sigue siendo vacÃ­o
    assert generar_n_caracteres(0, "") == ""  # Caso borde: 0 repeticiones de cadena vacÃ­a

    print("âœ… Todas las pruebas pasaron correctamente.")
    